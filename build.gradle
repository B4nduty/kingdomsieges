plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url "https://maven.shedaniel.me" }
	maven { url 'https://maven.wispforest.io/releases/' }
	maven {
		name = 'GeckoLib'
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
	}
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven {
		name "KosmX's maven"
		url 'https://maven.kosmx.dev/'
	}
	maven { url 'https://api.modrinth.com/maven' }
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven { url 'https://maven.wispforest.io' }

	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url "https://cursemaven.com"
			}
		}
		filter {
			includeGroup "curse.maven"
		}
	}
	maven { url 'https://maven.wispforest.io/releases' }
	maven { url 'https://maven.su5ed.dev/releases' }
	maven { url 'https://maven.fabricmc.net' }

	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "software.bernie.geckolib:geckolib-fabric-1.20.1:${project.geckolib}"

	modApi "dev.architectury:architectury-fabric:${project.architectury}"

	modApi "com.terraformersmc:modmenu:${project.modmenu}"

	modImplementation "io.wispforest:owo-lib:${project.owo_version}"
	include "io.wispforest:owo-sentinel:${project.owo_version}"

	annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")

	modImplementation("io.wispforest:accessories-fabric:${project.accessories}")

	modImplementation project(':stoneycore')

	modImplementation project(':streq')
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}